/*
   This file is part of Wool, a library for fine-grained independent
   task parallelism

   Copyright 2009-2016 Karl-Filip Fax√©n, kff@sics.se

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This is Wool version @WOOL_VERSION@
*/

/* We are in the same namespace as the examples so keep names unique. */

int fib2( int );

TASK_1( int, pfib2, int, n )
{
    // Make a regular call to lose track of __self and __dq_top.
    return fib2( n );
}

TASK_1( int, pfib2_int, int, n )
{
   if( n < 2 ) {
      return n;
   } else {
      int m,k;
      SPAWN( pfib2_int, n-1 );
      k = fib2( n-2 );
      m = SYNC( pfib2_int );
      return m+k;
   }
}

int fib2( int n )
{
   if( n < 2 ) {
      return n;
   } else {
      int m,k;
      SPAWN( pfib2_int, n-1 );
      k = fib2( n-2 );
      m = SYNC( pfib2_int );
      return m+k;
   }
}
