/*
   This file is part of Wool, a library for fine-grained independent
   task parallelism

   Copyright 2009- Karl-Filip Fax√©n, kff@sics.se
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:
       * Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.
       * Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.
       * Neither "Wool" nor the names of its contributors may be used to endorse
         or promote products derived from this software without specific prior
         written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR OTHER CONTRIBUTORS BE LIABLE FOR ANY
   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   This is Wool version @WOOL_VERSION@
*/

#ifndef WOOL_H
#define WOOL_H

#include "wool-common.h"

#include <stdio.h>

#define LOOP_BODY_0(NAME, COST, IXTY, IXNAME)                         \
                                                                      \
static unsigned long const NAME##__min_iters__                        \
   = COST > FINEST_GRAIN ? 1 : FINEST_GRAIN / ( COST ? COST : 20 );   \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME);          \
                                                                      \
VOID_TASK_2(NAME##_TREE, IXTY, __from, IXTY, __to)                    \
{                                                                     \
  if( __to - __from <= NAME##__min_iters__ ) {                        \
    IXTY __i;                                                         \
    for( __i = __from; __i < __to; __i++ ) {                          \
      NAME##_LOOP( __self, __i );                                     \
    }                                                                 \
  } else {                                                            \
    IXTY __mid = (__from + __to) / 2;                                 \
    SPAWN( NAME##_TREE, __mid, __to );                                \
    CALL( NAME##_TREE, __from, __mid );                               \
    SYNC( NAME##_TREE );                                              \
  }                                                                   \
}                                                                     \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME)           \

// Task definition for arity 1

#define TASK_FORW_1(RTYPE, NAME, ATYPE_1 )                            \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1);\
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );  \
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1);\

#define VOID_TASK_FORW_1(NAME, ATYPE_1 )                              \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1);\
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1);\

#define TASK_DECL_1(RTYPE, NAME, ATYPE_1)                             \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
    RTYPE res;                                                        \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1)                        \
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1 );                                      \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1 );                                      \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1);                 \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1 );                          \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1 );                          \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC(Worker *__self)                                     \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
    RTYPE res;                                                        \
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
    res =  NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return res;                                                       \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ( (NAME##_TD *) cached_top )->d.res;                       \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )       \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define TASK_IMPL_1(RTYPE, NAME, ATYPE_1, ARG_1 )                     \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1);                 \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1)      \
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
  RTYPE res;                                                          \
                                                                      \
                                                                      \
  t->info.size = sizeof(NAME##_TD);                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
  res = NAME##_CALL( __self , a1 );                                   \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
  post_eval_task->d.res = res;                                        \
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, sizeof(NAME##_TD) };      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
    t->d.res = NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1);       \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1)                  \
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1 );                          \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1)  \

#define TASK_1(RTYPE, NAME, ATYPE_1, ARG_1 )                          \
TASK_DECL_1(RTYPE, NAME, ATYPE_1)                                     \
TASK_IMPL_1(RTYPE, NAME, ATYPE_1, ARG_1)                              \
                                                                      \

#define VOID_TASK_DECL_1(NAME, ATYPE_1)                               \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1)                        \
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1 );                                      \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1 );                                      \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1);                  \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1 );                          \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1 );                          \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC(Worker *__self)                                      \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
     NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return ;                                                          \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ;                                                          \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )        \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define VOID_TASK_IMPL_1(NAME, ATYPE_1, ARG_1 )                       \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1);                  \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1)      \
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
                                                                      \
                                                                      \
  t->info.size = 0;                                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
   NAME##_CALL( __self , a1 );                                        \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, 0 };                      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_1), 1 ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
     NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1);        \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1)                   \
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1 );                          \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1)   \

#define VOID_TASK_1(NAME, ATYPE_1, ARG_1 )                            \
VOID_TASK_DECL_1(NAME, ATYPE_1)                                       \
VOID_TASK_IMPL_1(NAME, ATYPE_1, ARG_1)                                \
                                                                      \

#define LOOP_BODY_1(NAME, COST, IXTY, IXNAME, ATYPE_1, ARG_1)         \
                                                                      \
static unsigned long const NAME##__min_iters__                        \
   = COST > FINEST_GRAIN ? 1 : FINEST_GRAIN / ( COST ? COST : 20 );   \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME, ATYPE_1 ARG_1);\
                                                                      \
VOID_TASK_3(NAME##_TREE, IXTY, __from, IXTY, __to, ATYPE_1, a1)       \
{                                                                     \
  if( __to - __from <= NAME##__min_iters__ ) {                        \
    IXTY __i;                                                         \
    for( __i = __from; __i < __to; __i++ ) {                          \
      NAME##_LOOP( __self, __i, a1 );                                 \
    }                                                                 \
  } else {                                                            \
    IXTY __mid = (__from + __to) / 2;                                 \
    SPAWN( NAME##_TREE, __mid, __to, a1 );                            \
    CALL( NAME##_TREE, __from, __mid, a1 );                           \
    SYNC( NAME##_TREE );                                              \
  }                                                                   \
}                                                                     \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME, ATYPE_1 ARG_1)\

// Task definition for arity 2

#define TASK_FORW_2(RTYPE, NAME, ATYPE_1, ATYPE_2 )                   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2);\
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );  \
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2);\

#define VOID_TASK_FORW_2(NAME, ATYPE_1, ATYPE_2 )                     \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2);\
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2);\

#define TASK_DECL_2(RTYPE, NAME, ATYPE_1, ATYPE_2)                    \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
    RTYPE res;                                                        \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2)            \
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2 );                                  \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2 );                                  \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2);     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2 );                      \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2 );                      \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC(Worker *__self)                                     \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
    RTYPE res;                                                        \
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
    res =  NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return res;                                                       \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ( (NAME##_TD *) cached_top )->d.res;                       \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )       \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define TASK_IMPL_2(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2 )     \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2);     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
  RTYPE res;                                                          \
                                                                      \
                                                                      \
  t->info.size = sizeof(NAME##_TD);                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
  res = NAME##_CALL( __self , a1, a2 );                               \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
  post_eval_task->d.res = res;                                        \
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, sizeof(NAME##_TD) };      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
    t->d.res = NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2);\
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2)      \
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2 );                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2)\

#define TASK_2(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2 )          \
TASK_DECL_2(RTYPE, NAME, ATYPE_1, ATYPE_2)                            \
TASK_IMPL_2(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2)              \
                                                                      \

#define VOID_TASK_DECL_2(NAME, ATYPE_1, ATYPE_2)                      \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2)            \
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2 );                                  \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2 );                                  \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2);      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2 );                      \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2 );                      \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC(Worker *__self)                                      \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
     NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return ;                                                          \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ;                                                          \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )        \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define VOID_TASK_IMPL_2(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2 )       \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2);      \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
                                                                      \
                                                                      \
  t->info.size = 0;                                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
   NAME##_CALL( __self , a1, a2 );                                    \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, 0 };                      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
     NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2);\
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2)       \
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2 );                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2)\

#define VOID_TASK_2(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2 )            \
VOID_TASK_DECL_2(NAME, ATYPE_1, ATYPE_2)                              \
VOID_TASK_IMPL_2(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2)                \
                                                                      \

#define LOOP_BODY_2(NAME, COST, IXTY, IXNAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2)\
                                                                      \
static unsigned long const NAME##__min_iters__                        \
   = COST > FINEST_GRAIN ? 1 : FINEST_GRAIN / ( COST ? COST : 20 );   \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME, ATYPE_1 ARG_1, ATYPE_2 ARG_2);\
                                                                      \
VOID_TASK_4(NAME##_TREE, IXTY, __from, IXTY, __to, ATYPE_1, a1, ATYPE_2, a2)\
{                                                                     \
  if( __to - __from <= NAME##__min_iters__ ) {                        \
    IXTY __i;                                                         \
    for( __i = __from; __i < __to; __i++ ) {                          \
      NAME##_LOOP( __self, __i, a1, a2 );                             \
    }                                                                 \
  } else {                                                            \
    IXTY __mid = (__from + __to) / 2;                                 \
    SPAWN( NAME##_TREE, __mid, __to, a1, a2 );                        \
    CALL( NAME##_TREE, __from, __mid, a1, a2 );                       \
    SYNC( NAME##_TREE );                                              \
  }                                                                   \
}                                                                     \
                                                                      \
static inline void NAME##_LOOP(Worker *__self, IXTY IXNAME, ATYPE_1 ARG_1, ATYPE_2 ARG_2)\

// Task definition for arity 3

#define TASK_FORW_3(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3 )          \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3);\
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );  \
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3);\

#define VOID_TASK_FORW_3(NAME, ATYPE_1, ATYPE_2, ATYPE_3 )            \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3);\
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3);\

#define TASK_DECL_3(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3)           \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
    RTYPE res;                                                        \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
  *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) = a3;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2, a3 );                              \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2, a3 );                              \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3);\
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3 );                  \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3 );                  \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC(Worker *__self)                                     \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
    RTYPE res;                                                        \
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
    res =  NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return res;                                                       \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ( (NAME##_TD *) cached_top )->d.res;                       \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )       \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define TASK_IMPL_3(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3 )\
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3);\
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
  RTYPE res;                                                          \
                                                                      \
                                                                      \
  t->info.size = sizeof(NAME##_TD);                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
  res = NAME##_CALL( __self , a1, a2, a3 );                           \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
  post_eval_task->d.res = res;                                        \
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, sizeof(NAME##_TD) };      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
    t->d.res = NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3);\
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2, a3 );                  \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3)\

#define TASK_3(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3 )\
TASK_DECL_3(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3)                   \
TASK_IMPL_3(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3)\
                                                                      \

#define VOID_TASK_DECL_3(NAME, ATYPE_1, ATYPE_2, ATYPE_3)             \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
  *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) = a3;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2, a3 );                              \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2, a3 );                              \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3);\
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3 );                  \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3 );                  \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC(Worker *__self)                                      \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
     NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return ;                                                          \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ;                                                          \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )        \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define VOID_TASK_IMPL_3(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3 )\
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3);\
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
                                                                      \
                                                                      \
  t->info.size = 0;                                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
   NAME##_CALL( __self , a1, a2, a3 );                                \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, 0 };                      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
     NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3);\
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3)\
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2, a3 );                  \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3)\

#define VOID_TASK_3(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3 )\
VOID_TASK_DECL_3(NAME, ATYPE_1, ATYPE_2, ATYPE_3)                     \
VOID_TASK_IMPL_3(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3)\
                                                                      \


// Task definition for arity 4

#define TASK_FORW_4(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4 ) \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4);\
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );  \
  static inline __attribute__((__always_inline__))                    \
    RTYPE NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4);\

#define VOID_TASK_FORW_4(NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4 )   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SPAWN_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4);\
  static inline __attribute__((__always_inline__))                    \
    void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) );   \
  static inline __attribute__((__always_inline__))                    \
    void NAME##_CALL_DSP( Worker *__self, int _WOOL_(fs_in_task), ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4);\

#define TASK_DECL_4(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4)  \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
    RTYPE res;                                                        \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
  *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) = a3;\
  *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) = a4;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2, a3, a4 );                          \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2, a3, a4 );                          \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4);\
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3, a4 );              \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3, a4 );              \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC(Worker *__self)                                     \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
    RTYPE res;                                                        \
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
    res =  NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return res;                                                       \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ( (NAME##_TD *) cached_top )->d.res;                       \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )       \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define TASK_IMPL_4(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4 )\
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4);\
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
  RTYPE res;                                                          \
                                                                      \
                                                                      \
  t->info.size = sizeof(NAME##_TD);                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
  res = NAME##_CALL( __self , a1, a2, a3, a4 );                       \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
  post_eval_task->d.res = res;                                        \
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, sizeof(NAME##_TD) };      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
    t->d.res = NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3, ATYPE_4 ARG_4);\
                                                                      \
RTYPE NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2, a3, a4 );              \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
RTYPE NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3, ATYPE_4 ARG_4)\

#define TASK_4(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4 )\
TASK_DECL_4(RTYPE, NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4)          \
TASK_IMPL_4(RTYPE, NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4)\
                                                                      \

#define VOID_TASK_DECL_4(NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4)    \
                                                                      \
typedef struct _##NAME##_TD {                                         \
  TASK_COMMON_FIELDS( struct _##NAME##_TD * )                         \
  _WOOL_(StolenTaskInfo) info;                                        \
  union {                                                             \
                                                                      \
  } d;                                                                \
} NAME##_TD;                                                          \
                                                                      \
typedef struct {                                                      \
  Task* (*f)(Worker *__self, NAME##_TD *t);                           \
  int size;                                                           \
} NAME##_DICT_T;                                                      \
                                                                      \
static inline __attribute__((__always_inline__))                      \
char* NAME##_FREE_SPACE(Task* cached_top)                             \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
  return _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ), double );\
}                                                                     \
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t);                      \
                                                                      \
extern NAME##_DICT_T NAME##_DICT;                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN(Worker *__self , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  Task* cached_top = __self->pr.pr_top;                               \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( cached_top, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
  *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ) = a1;       \
  *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ) = a2;\
  *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ) = a3;\
  *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) = a4;\
                                                                      \
                                                                      \
  COMPILER_FENCE;                                                     \
                                                                      \
  _WOOL_(fast_spawn)( __self, cached_top, (_wool_task_header_t) &NAME##_DICT );\
                                                                      \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SPAWN_DSP(Worker *__self, int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    NAME##_SPAWN( __self , a1, a2, a3, a4 );                          \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    NAME##_SPAWN( __self , a1, a2, a3, a4 );                          \
  }                                                                   \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4);\
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_CALL_DSP( Worker *_WOOL_(self), int _WOOL_(fs_in_task), ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4 )\
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3, a4 );              \
  } else {                                                            \
    _WOOL_(self) = _WOOL_(slow_get_self)( );                          \
    return NAME##_CALL( _WOOL_(self) , a1, a2, a3, a4 );              \
  }                                                                   \
}                                                                     \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
/* This implementation has the PUB function only in the implementation file, so uses from other\
   compilation units call it.                                         \
*/                                                                    \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp );                \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC(Worker *__self)                                      \
{                                                                     \
  WOOL_WHEN_MSPAN( hrtime_t e_span; )                                 \
  Task *jfp = __self->pr.join_first_private;                          \
  Task *cached_top = __self->pr.pr_top;                               \
                                                                      \
  if( MAKE_TRACE ||                                                   \
      ( LOG_EVENTS &&                                                 \
      __self->pr.curr_block_fidx + ( cached_top - __self->pr.curr_block_base ) <= __self->pr.n_public ) )\
  {                                                                   \
    logEvent( __self, 6 );                                            \
  }                                                                   \
                                                                      \
  if( __builtin_expect( jfp < cached_top, 1 ) ) {                     \
    Task *t = --cached_top;                                           \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
                                                                      \
    __self->pr.pr_top = cached_top;                                   \
    PR_INC( __self, CTR_inlined );                                    \
                                                                      \
    WOOL_MSPAN_BEFORE_INLINE( e_span, t );                            \
                                                                      \
     NAME##_CALL( __self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
    WOOL_MSPAN_AFTER_INLINE( e_span, t );                             \
    if( MAKE_TRACE ) {                                                \
      logEvent( __self, 8 );                                          \
    }                                                                 \
    return ;                                                          \
  } else {                                                            \
    printf("%s:%d:%s|cached_top was: %p\n", __FILE__, __LINE__, __func__, cached_top); \
    cached_top = NAME##_PUB( __self, cached_top, jfp );               \
    printf("%s:%d:%s|cached_top became: %p\n", __FILE__, __LINE__, __func__, cached_top); \ 
    return ;                                                          \
  }                                                                   \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_SYNC_DSP( Worker *__self, int _WOOL_(fs_in_task) )        \
{                                                                     \
  if( _WOOL_(fs_in_task) ) {                                          \
    return NAME##_SYNC( __self );                                     \
  } else {                                                            \
    __self = _WOOL_(slow_get_self)( );                                \
    return NAME##_SYNC( __self );                                     \
  }                                                                   \
}                                                                     \

#define VOID_TASK_IMPL_4(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4 )\
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4);\
                                                                      \
/** SPAWN related functions **/                                       \
                                                                      \
Task* NAME##_WRAP_AUX(Worker *__self, NAME##_TD *t , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  NAME##_TD *post_eval_task;                                          \
  NAME##_TD *volatile v_t = t;                                        \
                                                                      \
                                                                      \
  t->info.size = 0;                                                   \
  COMPILER_FENCE;                                                     \
  _WOOL_(save_link)( (Task**) &v_t );                                 \
                                                                      \
   NAME##_CALL( __self , a1, a2, a3, a4 );                            \
                                                                      \
  post_eval_task = (NAME##_TD*) _WOOL_(swap_link)( (Task *volatile *) &v_t, (Task *) t );\
                                                                      \
                                                                      \
  return (Task *) post_eval_task;                                     \
}                                                                     \
                                                                      \
Task* NAME##_WRAP(Worker *__self, NAME##_TD *t)                       \
{                                                                     \
  char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
  return NAME##_WRAP_AUX( __self, t , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
}                                                                     \
                                                                      \
NAME##_DICT_T NAME##_DICT = { &NAME##_WRAP, 0 };                      \
                                                                      \
/** SYNC related functions **/                                        \
                                                                      \
Task *NAME##_PUB(Worker *self, Task *top, Task *jfp )                 \
{                                                                     \
  unsigned long ps = self->pr.public_size;                            \
                                                                      \
  WOOL_WHEN_AS( int us; )                                             \
                                                                      \
  grab_res_t res = WOOL_FAST_EXC ? TF_EXC : TF_OCC;                   \
                                                                      \
  if(                                                                 \
        ( WOOL_WHEN_AS_C( us = self->pr.unstolen_stealable )          \
         __builtin_expect( (unsigned long) jfp - (unsigned long) top < ps, 1 ) )\
         && __builtin_expect( WOOL_LS_TEST(us), 1 )                   \
         && (res = _WOOL_(grab_in_sync)( self, (top)-1 ),             \
             (                                                        \
               WOOL_WHEN_AS_C( self->pr.unstolen_stealable = us-1 )   \
               __builtin_expect( res != TF_OCC, 1 ) ) )               \
   ) {                                                                \
    /* Semi fast case */                                              \
    NAME##_TD *t = (NAME##_TD *) --top;                               \
    char *_WOOL_(p) = _WOOL_(arg_ptr)( (Task *) t, _WOOL_(max)( __alignof__(ATYPE_4), _WOOL_(max)( __alignof__(ATYPE_3), _WOOL_(max)( __alignof__(ATYPE_2), _WOOL_(max)( __alignof__(ATYPE_1), 1 ) ) ) ) );\
                                                                      \
    self->pr.pr_top = top;                                            \
    PR_INC( self, CTR_inlined );                                      \
     NAME##_CALL( self , *(ATYPE_1 *)( _WOOL_(p) + _WOOL_ALIGNTO( 0, ATYPE_1 ) ), *(ATYPE_2 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ) ), *(ATYPE_3 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ) ), *(ATYPE_4 *)( _WOOL_(p) + _WOOL_ALIGNTO( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( _WOOL_OFFSET_AFTER( 0, ATYPE_1 ), ATYPE_2 ), ATYPE_3 ), ATYPE_4 ) ) );\
    return top;                                                       \
  } else {                                                            \
      /* An exceptional case */                                       \
      top = _WOOL_(slow_sync)( self, top, res );                      \
      return top;                                                     \
  }                                                                   \
                                                                      \
}                                                                     \
                                                                      \
/** CALL related functions **/                                        \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3, ATYPE_4 ARG_4);\
                                                                      \
void NAME##_CALL(Worker *_WOOL_(self) , ATYPE_1 a1, ATYPE_2 a2, ATYPE_3 a3, ATYPE_4 a4)\
{                                                                     \
  return NAME##_WRK( _WOOL_(self), 1 , a1, a2, a3, a4 );              \
}                                                                     \
                                                                      \
static inline __attribute__((__always_inline__))                      \
void NAME##_WRK(Worker *__self, int _WOOL_(in_task), ATYPE_1 ARG_1, ATYPE_2 ARG_2, ATYPE_3 ARG_3, ATYPE_4 ARG_4)\

#define VOID_TASK_4(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4 )\
VOID_TASK_DECL_4(NAME, ATYPE_1, ATYPE_2, ATYPE_3, ATYPE_4)            \
VOID_TASK_IMPL_4(NAME, ATYPE_1, ARG_1, ATYPE_2, ARG_2, ATYPE_3, ARG_3, ATYPE_4, ARG_4)\
                                                                      \


#endif
